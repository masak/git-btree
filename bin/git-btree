use Git::BTree::Infer;

my @branches = qx[git for-each-ref refs/heads].lines;
my %branches;

for @branches -> $line {
    $line ~~ / 'refs/heads/' (\S+) /
        or die "Unknown line format '$line'";

    my $branch-name = ~$0;
    my $commits = qqx[git log --pretty="format:%H (%P) %an %ae %ad" {$branch-name} --];

    %branches{$branch-name} = $commits;
}

my $root = infer-tree("", %branches);
my $output = $root.color-output;

constant BOLD = "\e[1m";
constant BOLD_OFF = "\e[22m";

my %attrs =
    reset      => "0",
    bold       => "1",
    underline  => "4",
    inverse    => "7",
    black      => "30",
    red        => "31",
    green      => "32",
    yellow     => "33",
    blue       => "34",
    magenta    => "35",
    cyan       => "36",
    white      => "37",
    default    => "39",
    on_black   => "40",
    on_red     => "41",
    on_green   => "42",
    on_yellow  => "43",
    on_blue    => "44",
    on_magenta => "45",
    on_cyan    => "46",
    on_white   => "47",
    on_default => "49";

sub color (Str $what) is export {
    return ""
        if $what eq "";
    my @res;
    my @a = $what.split(' ');
    for @a -> $attr {
        if %attrs{$attr}:exists {
            @res.push: %attrs{$attr}
        } elsif $attr ~~ /^ ('on_'?) (\d+ [ ',' \d+ ',' \d+ ]?) $/ {
            @res.push: ~$0 ?? '48' !! '38';
            my @nums = $1.split(',');
            die("Invalid color value $_") unless +$_ <= 255 for @nums;
            @res.push: @nums == 3 ?? '2' !! '5';
            @res.append: @nums;
        } else {
            die("Invalid attribute name '$attr'")
        }
    }
    return "\e[" ~ @res.join(';') ~ "m";
}

sub colored (Str $what, Str $how) is export {
    color($how) ~ $what ~ color('reset');
}

$output ~~ s:g['<red>' (.+?) '</red>'] = colored(~$0, "bold red");
$output ~~ s:g['<green>' (.+?) '</green>'] = colored(~$0, "bold green");
$output ~~ s:g['<gray>' (.+?) '</gray>'] = colored(~$0, "bold black");
$output ~~ s:g['<cyan>' (.+?) '</cyan>'] = colored(~$0, "bold cyan");

print $output;
